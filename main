import numpy as np
import random
import math
import matplotlib.pyplot as plt
import scipy.linalg as sl
from RLS import recursive_least_squares

##
ny = 6  # 四阶状态方程
dim = 0  # LS input dim
T0 = 6  # control layer sample period(s)
T = 10*3600  # run layer sample period(s)
M = np.array([15, 15, 15])  # benefits and costs  indices
r_exp = np.array([3 * 15 * 13300])
Q = np.array([100])
index_lambda = 0.6
R = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

# define auxiliary variable
HHH = np.array([])
zz = np.array([])
ZZ = np.array([])
zzz = np.array([])
ZZZ = np.array([])
zz0 = np.array([])
zzz0 = np.array([])

#  define initial state
H0 = np.array(np.eye(18))
w0 = np.array([[15300], [15300], [15300]])  # set point should be reset for different model $$$$！！！！
u0 = np.array([[2, 2, 2]])
X0 = np.array([[13000, 12888, 13000, 12888, 13000, 12888, 2000, 2000, 2000, 3* 15 * 13300]])  # 状态值
x0 = np.array([[13000, 12888, 13000,12888, 13000, 12888]])
z0 = np.array([[13000, 12888, 13000, 12888, 13000, 12888, 2000, 2000, 2000, 3* 15 * 13300, 15300, 15300, 15300]])
E = np.array(np.zeros((3, 1)))  # integral error

# control input control input
y0 = np.array([[15300, 15300, 15300]])  # equilibrium control input
pid = np.array([[-1.2117, 0.8001], [-1.4223, 0.7998], [-1.5786, 0.8147]])  # [Kp KI]

# define x,y,w(iteration variables)
X = np.array(np.zeros((len(X0[0, :]), T)))
x = np.array(np.zeros((len(x0[0, :]), T)))
w = np.array(np.zeros((len(w0[:, 0]), T)))
w_fortest = np.array(np.zeros((len(w0[:, 0]), T)))
u = np.array(np.zeros((len(u0[0, :]), T)))
y = np.array(np.zeros((len(y0[0, :]), T)))
z = np.array(np.zeros((len(z0[0, :]), T)))
H = np.array(np.zeros((len(z[:, 0]), len(z[:, 0]), T)))  # dim equals to z
H_ww = np.array(np.zeros((len(w0[:, 0]), len(w0[:, 0]), T)))
H_wX = np.array(np.zeros((len(w0[:, 0]), len(X0[0, :]), T)))
error = np.array(np.zeros((3, T)))

# 求阶和
for i in range(len(z[:, 0])):
    dim += i + 1

# original transform matrices
A = np.array([[0, 1, 0, 0, 0, 0], [-1.143, 0.141, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0], [0, 0, -1.167, 0.162, 0, 0],
              [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, -1.165, 0.158]])
B = np.array([[0, 0, 0], [-88.918, 0, 0],
              [0, 0, 0], [0, -80.676, 0],
              [0, 0, 0], [0, 0, -85.973]])
C = np.array([[1, 0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0]])

# argumented transform matrics
# matrix = np.zeros((4, 2))
# A_bar = np.concatenate((A, matrix), axis=1)
# matrix = np.eye(2)
# matrix = np.concatenate((-C, matrix), axis=1)
# A_bar = np.concatenate((A_bar, matrix), axis=0)
#
# B_bar = np.concatenate((B, np.zeros((2, 2))), axis=0)

# C_bar = np.concatenate((-C, np.zeros((2, 2))), axis=1)
#
# B_hat = np.concatenate((B @ pid, np.eye(2)), axis=0)
# A_hat = A_bar + (B_bar @ pid @ C_bar)
C_hat = np.concatenate((C, np.zeros((3, 3))), axis=1)

C_0 = M @ C_hat
C_tidle = np.concatenate((C_0, np.array([-1])), axis=0)
A_j = np.outer(C_tidle.T * Q, C_tidle)

## this part is the iteration of variables
x[:, 0] = x0[:]
y[:, 0] = y0[:]
u[:, 0] = u0[:]
X[:, 0] = X0[:]
z[:, 0] = z0[:]
w[:, 0] = w0[:, 0]
# for k in range(T - 1):
#     w[:, k] = w0[:, 0]
#     # this is state function
#     x[:, k + 1] = A_hat @ x[:, k] + B_hat @ w[:, k]
#     y[:, k + 1] = C_hat @ x[:, k]
# print(x,y)

# 模拟一些数据
x_point = np.array(np.zeros((dim, T)))
y_point = np.array(np.zeros((1, T)))
# 初始化参数和协方差矩阵
zz0 = np.outer(z0.T, z0)
for i in range(len(z0[0, :])):
    zzz0 = np.append(zzz0, zz0[i, i:], axis=0)
initial_parameters = np.ones((1,len(zzz0)))  # z_k
initial_covariance_matrix = np.eye(dim)  # Identity matrix as an initial assumption

for k in range(T - 1):
    w[:, k + 1] = w[:, k]  # update set value

    # this is state function
    x[:, k + 1] = A @ x[:, k] + B @ u[:, k]
    y[:, k + 1] = C @ x[:, k+1]
    X[:, k + 1] = np.concatenate((np.concatenate((x[:, k + 1], E[:, 0]), axis=0), r_exp), axis=0)
    # this is control
    error[:, k + 1] = (w[:, k ] - y[:, k + 1])/200  # next iteration error will be used
    E[:, 0] = E[:, 0] + error[:, k + 1]
    u[:, k + 1] = (pid[:, 0] * error[:, k + 1] + pid[:, 1] * E[:, 0] * 0.5)*(-0.5)

    # this is q-learning algorithm
    z[:, k + 1] = np.concatenate(
        (np.concatenate((np.concatenate((x[:, k + 1], E[:, 0]), axis=0), r_exp), axis=0), w[:, k + 1]), axis=0)


    if k>=2:
        # 处理数据
        # 平铺,
        # 平铺,zzz is part of x_point
        zz = np.outer(z[:, k], z[:, k].T)
        for i in range(len(z0[0, :])):
            zzz = np.append(zzz, zz[i, i:], axis=0)

        ZZ = np.outer(z[:, k + 1], z[:, k + 1].T)
        for i in range(len(z0[0, :])):
            ZZZ = np.append(ZZZ, ZZ[i, i:], axis=0)

        # 拟合数据点
        x_point[:, k] = zzz - index_lambda * ZZZ
        y_point[:, k] = X[:, k].T @ A_j @ X[:, k] + w[:, k].T @ R @ w[:, k]
        initial_parameters, initial_covariance_matrix = recursive_least_squares(x_point[:, k], y_point[:, k],initial_parameters,initial_covariance_matrix)
        # if k % 100 == 0:
        #     print('第', k ,'次' ,initial_parameters)
        zzz = np.array([])
        ZZZ = np.array([])

        a = 0
        b = 0

        h = np.array(np.zeros((len(z[:, 0]), len(z[:, 0]))))
        for i in range(len(z[:, 0])):
            a = a + len(z[:, 0]) - i
            h[i, i:] = initial_parameters[0,b:a]
            b = a
        H[:, :, k] = (0.5 * (h[:, :] + h[:, :].T)).copy()  # final H
        #print(H[:, :, k])
        H_ww[:, :, k] = H[len(z[:, 0]) - len(w0[:, 0]):, len(z[:, 0]) - len(w0[:, 0]):,k]  # H_ww.shape = dim(w) * dim(w)
        H_wX[:, :, k] = H[len(z[:, 0]) - len(w0[:, 0]):, 0: len(X0[0, :]), k]  # H_wX.shape = dim(w) * dim(X)
        w_fortest[:, k] = -sl.pinv(H_ww[:, :, k]) @ H_wX[:, :, k] @ X[:, k]
    if k % 360 == 0 and k >= 500:
        w[:, k + 1] = -sl.pinv(H_ww[:, :, k]) @ H_wX[:, :, k] @ X[:, k]
        if w[:, k + 1].any() >=16000:
            w[:, k + 1] = [16000,16000,16000]
        if w[:, k + 1].any() < 12000:
            w[:, k + 1] = [12000,12000,12000]
    # 打印最终参数
    # if k % 10 == 1:
    #     print("最终参数:", k, initial_parameters, '\n')
    #     print("误差", x_point[:, k] @ initial_parameters - y_point[:, k])
    #     print('设定值', w[:, k + 1])

# plot picture
t = np.arange(1, T+1, 1)
plt.figure()
l1 = plt.plot(t, w[0, :], color='b', linestyle='dashed', label='set point')
plt.xlabel('t Iterations')
# y轴文本
plt.ylabel('w Set value')
# 标题
plt.title('Evaluation of Set value')
plt.show()


plt.figure()
plt.plot(t, w_fortest[0, :], color='b', linestyle='dashed', label='set point')


plt.figure()
l2 = plt.plot(t, y[0, :], color='r', linestyle='dashed', label='output')
plt.xlabel('t Iterations')
# y轴文本
plt.ylabel('y output')
# 标题
plt.title('Evaluation of y')
plt.show()




print('done')